@page "/"
@inject IJSRuntime JS
@using BlazorServerApp.Data
@using System.IO
@using GemBox.Presentation

<h1>Card generator [Blazor Server App]</h1>

<EditForm Model="model" OnSubmit="CreatePresentation">
    <div class="form-group">Top text: <InputTextArea @bind-Value="model.Top" class="form-control"></InputTextArea></div>
    <div class="form-group">Middle text: <InputTextArea @bind-Value="model.Middle" class="form-control"></InputTextArea></div>
    <div class="form-group">Bottom text: <InputTextArea @bind-Value="model.Bottom" class="form-control"></InputTextArea></div>
    <div class="col-1" style="min-width:75px">Format:
        <InputSelect @bind-Value="model.Format" class="form-control">
            @foreach (string format in model.FormatMappingDictionary.Select(item => item.Key))
            {
                <option value="@format">@format</option>
            }
        </InputSelect>
    </div>
    <button class="btn btn-primary mt-2" type="submit">Create</button>
</EditForm>

@code {
    private CardModel model = new();

    private async Task CreatePresentation()
    {
        ComponentInfo.SetLicense("FREE-LIMITED-KEY");

        // Load template presentation.
        var presentation = PresentationDocument.Load("CardWithPlaceholderElements.pptx");

        // Get first slide.
        var slide = presentation.Slides[0];

        // Get placeholder elements.
        var placeholders = slide.Content.Drawings
            .OfType<Shape>()
            .Where(s => s.Placeholder != null && s.Placeholder.PlaceholderType == PlaceholderType.Text);

        // Set text on placeholders.
        var top = placeholders.First(p => p.Name == "Top Placeholder");
        top.TextContent.LoadText(this.model.Top);
        var middle = placeholders.First(p => p.Name == "Middle Placeholder");
        middle.TextContent.LoadText(this.model.Middle);
        var bottom = placeholders.First(p => p.Name == "Bottom Placeholder");
        bottom.TextContent.LoadText(this.model.Bottom);

        // Save presentation in specified file format.
        var stream = new MemoryStream();
        presentation.Save(stream, this.model.Options);

        // Download file.
        using var streamRef = new DotNetStreamReference(stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", $"BlazorServerOutput.{this.model.Format.ToLower()}", streamRef);
    }
}